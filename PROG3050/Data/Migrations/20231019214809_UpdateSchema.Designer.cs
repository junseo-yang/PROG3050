// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PROG3050.Data;

#nullable disable

namespace PROG3050.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019214809_UpdateSchema")]
    partial class UpdateSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f80cf2ae-f5b3-422e-8225-6a760b3bd6df",
                            ConcurrencyStamp = "86557d82-7438-4805-b51b-4fa239fc49fa",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c1a9e393-125c-4548-9489-21b9808a61df",
                            ConcurrencyStamp = "1d5b0745-4f2d-4f15-a1bc-16b329100f0d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0475ff1a-69d1-458a-b0a4-3a0a651ae0a6",
                            ConcurrencyStamp = "d3d85868-8423-4a10-8550-59f26987f7fa",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "9e7b981b-da47-4597-a17a-ae4df723981d",
                            ConcurrencyStamp = "85e4cfe0-bf4a-4e51-8947-66917e23a990",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e03c8494-17d9-413f-b484-36dc8054f0e0",
                            RoleId = "f80cf2ae-f5b3-422e-8225-6a760b3bd6df"
                        },
                        new
                        {
                            UserId = "4c22c984-e9df-4f81-a46c-11851ac4bf64",
                            RoleId = "c1a9e393-125c-4548-9489-21b9808a61df"
                        },
                        new
                        {
                            UserId = "101de009-6ad9-4d24-a495-67bb602d0532",
                            RoleId = "0475ff1a-69d1-458a-b0a4-3a0a651ae0a6"
                        },
                        new
                        {
                            UserId = "e40efa73-04a9-4e42-8f09-ab45b8676397",
                            RoleId = "9e7b981b-da47-4597-a17a-ae4df723981d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PROG3050.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "US"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Description = "Welcome Newcomers! Enjoy the party!",
                            EndDateTime = new DateTime(2023, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "2023 Annual Event"
                        },
                        new
                        {
                            EventId = 2,
                            Description = "Welcome Game Developers! Enjoy the party!",
                            EndDateTime = new DateTime(2023, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDateTime = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "2023 GameCon"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.EventUser", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUser");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = "e40efa73-04a9-4e42-8f09-ab45b8676397"
                        },
                        new
                        {
                            EventId = 2,
                            UserId = "e40efa73-04a9-4e42-8f09-ab45b8676397"
                        },
                        new
                        {
                            EventId = 1,
                            UserId = "101de009-6ad9-4d24-a495-67bb602d0532"
                        },
                        new
                        {
                            EventId = 1,
                            UserId = "4c22c984-e9df-4f81-a46c-11851ac4bf64"
                        },
                        new
                        {
                            EventId = 2,
                            UserId = "4c22c984-e9df-4f81-a46c-11851ac4bf64"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.FavouritePlatform", b =>
                {
                    b.Property<int>("FavouritePlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouritePlatformId"), 1L, 1);

                    b.Property<string>("FavouritePlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouritePlatformId");

                    b.ToTable("FavouritePlatform");

                    b.HasData(
                        new
                        {
                            FavouritePlatformId = 1,
                            FavouritePlatformName = "PC"
                        },
                        new
                        {
                            FavouritePlatformId = 2,
                            FavouritePlatformName = "Mobile"
                        },
                        new
                        {
                            FavouritePlatformId = 3,
                            FavouritePlatformName = "Console"
                        },
                        new
                        {
                            FavouritePlatformId = 4,
                            FavouritePlatformName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.HasIndex("GameCategoryId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Description = "For over two decades, Counter-Strike has offered an elite competitive experience, one shaped by millions of players from across the globe. And now the next chapter in the CS story is about to begin. This is Counter-Strike 2.",
                            GameCategoryId = 3,
                            Price = 0.0,
                            PublishDate = new DateTime(2012, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Counter-Strike 2"
                        },
                        new
                        {
                            GameId = 2,
                            Description = "Star Trek: Infinite is a grand strategy experience that lets you play your own Star Trek story as the leader of one of four major factions in the galaxy. Follow the specially crafted story or blaze your own trail in the first Star Trek grand strategy game.",
                            GameCategoryId = 1,
                            Price = 39.990000000000002,
                            PublishDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Star Trek: Infinite"
                        },
                        new
                        {
                            GameId = 3,
                            Description = "Raise a city from the ground up and transform it into a thriving metropolis with the most realistic city builder ever. Push your creativity and problem-solving to build on a scale you've never experienced. With deep simulation and a living economy, this is world-building without limits.",
                            GameCategoryId = 2,
                            Price = 59.990000000000002,
                            PublishDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cities: Skylines II"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.GameCategory", b =>
                {
                    b.Property<int>("GameCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameCategoryId"), 1L, 1);

                    b.Property<string>("GameCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameCategoryId");

                    b.ToTable("GameCategory");

                    b.HasData(
                        new
                        {
                            GameCategoryId = 1,
                            GameCategoryName = "Action"
                        },
                        new
                        {
                            GameCategoryId = 2,
                            GameCategoryName = "Adventure"
                        },
                        new
                        {
                            GameCategoryId = 3,
                            GameCategoryName = "FPS"
                        },
                        new
                        {
                            GameCategoryId = 4,
                            GameCategoryName = "Shooter"
                        },
                        new
                        {
                            GameCategoryId = 5,
                            GameCategoryName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            LanguageName = "English"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.MailingAddress", b =>
                {
                    b.Property<int>("MailingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailingAddressId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailingAddressId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("MailingAddress");

                    b.HasData(
                        new
                        {
                            MailingAddressId = 1,
                            City = "HALIFAX",
                            DeliveryInstruction = "At the door",
                            PostalCode = "B3J 2B3",
                            ProvinceId = 7,
                            Street = "978 ARGYLE ST N"
                        },
                        new
                        {
                            MailingAddressId = 2,
                            City = "TORONTO",
                            DeliveryInstruction = "At the Post Box",
                            PostalCode = "M4K 1M8",
                            ProvinceId = 9,
                            Street = "87 DANFORTH AVE",
                            Unit = "501"
                        },
                        new
                        {
                            MailingAddressId = 3,
                            City = "BIG VALLEY",
                            PostalCode = "T0L 1K0",
                            ProvinceId = 1,
                            Street = "4 FIRST AVE S"
                        },
                        new
                        {
                            MailingAddressId = 4,
                            City = "COURTENAY",
                            DeliveryInstruction = "Ask the security Guard to get in.",
                            PostalCode = "V9N 0A7",
                            ProvinceId = 2,
                            Street = "PO BOX 4600 STN B"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTime(2012, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 4,
                            Status = "Processed",
                            UserId = "e40efa73-04a9-4e42-8f09-ab45b8676397"
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTime(2020, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 2,
                            Status = "Processed",
                            UserId = "4c22c984-e9df-4f81-a46c-11851ac4bf64"
                        },
                        new
                        {
                            OrderId = 3,
                            OrderDate = new DateTime(2022, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingAddressId = 3,
                            Status = "Pending",
                            UserId = "101de009-6ad9-4d24-a495-67bb602d0532"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.OrderGame", b =>
                {
                    b.Property<int>("OrderGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderGameId"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderGame");

                    b.HasData(
                        new
                        {
                            OrderGameId = 1,
                            GameId = 1,
                            OrderId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderGameId = 2,
                            GameId = 2,
                            OrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderGameId = 3,
                            GameId = 2,
                            OrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderGameId = 4,
                            GameId = 3,
                            OrderId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            OrderGameId = 5,
                            GameId = 3,
                            OrderId = 3,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"), 1L, 1);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Preference");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 3,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 4,
                            LanguageId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceFavouritePlatform", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("FavouritePlatformId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "FavouritePlatformId");

                    b.HasIndex("FavouritePlatformId");

                    b.ToTable("PreferenceFavouritePlatform");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            FavouritePlatformId = 1
                        },
                        new
                        {
                            PreferenceId = 1,
                            FavouritePlatformId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            FavouritePlatformId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            FavouritePlatformId = 3
                        },
                        new
                        {
                            PreferenceId = 3,
                            FavouritePlatformId = 1
                        },
                        new
                        {
                            PreferenceId = 4,
                            FavouritePlatformId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceGameCategory", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "GameCategoryId");

                    b.HasIndex("GameCategoryId");

                    b.ToTable("PreferenceGameCategory");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            GameCategoryId = 1
                        },
                        new
                        {
                            PreferenceId = 1,
                            GameCategoryId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            GameCategoryId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            GameCategoryId = 3
                        },
                        new
                        {
                            PreferenceId = 3,
                            GameCategoryId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CountryId = 1,
                            ProvinceName = "AB"
                        },
                        new
                        {
                            ProvinceId = 2,
                            CountryId = 1,
                            ProvinceName = "BC"
                        },
                        new
                        {
                            ProvinceId = 3,
                            CountryId = 1,
                            ProvinceName = "MB"
                        },
                        new
                        {
                            ProvinceId = 4,
                            CountryId = 1,
                            ProvinceName = "NB"
                        },
                        new
                        {
                            ProvinceId = 5,
                            CountryId = 1,
                            ProvinceName = "NL"
                        },
                        new
                        {
                            ProvinceId = 6,
                            CountryId = 1,
                            ProvinceName = "NT"
                        },
                        new
                        {
                            ProvinceId = 7,
                            CountryId = 1,
                            ProvinceName = "NS"
                        },
                        new
                        {
                            ProvinceId = 8,
                            CountryId = 1,
                            ProvinceName = "NU"
                        },
                        new
                        {
                            ProvinceId = 9,
                            CountryId = 1,
                            ProvinceName = "ON"
                        },
                        new
                        {
                            ProvinceId = 10,
                            CountryId = 1,
                            ProvinceName = "PE"
                        },
                        new
                        {
                            ProvinceId = 11,
                            CountryId = 1,
                            ProvinceName = "QC"
                        },
                        new
                        {
                            ProvinceId = 12,
                            CountryId = 1,
                            ProvinceName = "SK"
                        },
                        new
                        {
                            ProvinceId = 13,
                            CountryId = 1,
                            ProvinceName = "YT"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("PROG3050.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Description = "Counter-Strike 2 is the best game that I've ever played. Actions and graphics are amazing.",
                            GameId = 1,
                            Rating = 5.0,
                            Status = "Pending",
                            Title = "The Best Game!",
                            UserId = "e40efa73-04a9-4e42-8f09-ab45b8676397"
                        },
                        new
                        {
                            ReviewId = 2,
                            Description = "Star Trek: Infinite is a decent game to play. I'll definitely recommend you to play.",
                            GameId = 2,
                            Rating = 4.0,
                            Status = "Processed",
                            Title = "Good Game",
                            UserId = "4c22c984-e9df-4f81-a46c-11851ac4bf64"
                        },
                        new
                        {
                            ReviewId = 3,
                            Description = "Counter-Strike 2 is the best game that I've ever played. Actions and graphics are amazing.",
                            GameId = 3,
                            Rating = 2.0,
                            Status = "Pending",
                            Title = "Bad Game!",
                            UserId = "101de009-6ad9-4d24-a495-67bb602d0532"
                        },
                        new
                        {
                            ReviewId = 4,
                            Description = "Counter-Strike 2 is the best game that I've ever played. Actions and graphics are amazing.",
                            GameId = 2,
                            Rating = 2.0,
                            Status = "Pending",
                            Title = "Bad Game!",
                            UserId = "101de009-6ad9-4d24-a495-67bb602d0532"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.ShippingAddress", b =>
                {
                    b.Property<int>("ShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingAddressId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShippingAddressId");

                    b.ToTable("ShippingAddress");

                    b.HasData(
                        new
                        {
                            ShippingAddressId = 1,
                            City = "HALIFAX",
                            Country = "Canada",
                            DeliveryInstruction = "At the door",
                            PostalCode = "B3J 2B3",
                            Province = "NU",
                            Street = "978 ARGYLE ST N"
                        },
                        new
                        {
                            ShippingAddressId = 2,
                            City = "TORONTO",
                            Country = "Canada",
                            DeliveryInstruction = "At the Post Box",
                            PostalCode = "M4K 1M8",
                            Province = "ON",
                            Street = "87 DANFORTH AVE",
                            Unit = "501"
                        },
                        new
                        {
                            ShippingAddressId = 3,
                            City = "BIG VALLEY",
                            Country = "Canada",
                            PostalCode = "T0L 1K0",
                            Province = "AB",
                            Street = "4 FIRST AVE S"
                        },
                        new
                        {
                            ShippingAddressId = 4,
                            City = "COURTENAY",
                            Country = "Canada",
                            DeliveryInstruction = "Ask the security Guard to get in.",
                            PostalCode = "V9N 0A7",
                            Province = "BC",
                            Street = "PO BOX 4600 STN B"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAddressSame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromotionalEmail")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MailingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MailingAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PreferenceId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e03c8494-17d9-413f-b484-36dc8054f0e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5fc16db-6df0-4c99-a664-b14b0235247e",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 1,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELBk2e6swexqfCS65M+PNu0G0UUYrZZnOHCJj0FmEa9M0m91kTW03qrNoVnxpFU5fQ==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 1,
                            SecurityStamp = "a5cf4025-35db-423a-9219-f1aa5da4ab1a",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "4c22c984-e9df-4f81-a46c-11851ac4bf64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "168be87d-538d-413f-bfb1-b09353dfd18e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 2,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELKC6bNnpdUriR1GS7AeLLs9pUX+IetcNRPbgTGgceh5oeiknD2tlOOr7mcLdsAXWg==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 2,
                            SecurityStamp = "22147c4a-aae8-4c74-9fc2-f36756d8ee85",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "101de009-6ad9-4d24-a495-67bb602d0532",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1085ab21-0cec-465d-b1f5-99c0ecbaa615",
                            Email = "moderator@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 3,
                            NormalizedEmail = "MODERATOR",
                            NormalizedUserName = "MODERATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGt2ldxsN6en5Mj39Ug3pEyHHStUKAXVYmO21LsvIbrQYFDnw34DKD8sRU1jKuJ9Ig==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 3,
                            SecurityStamp = "f6cceded-1ea2-4a61-90fe-5b11dae784e7",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "e40efa73-04a9-4e42-8f09-ab45b8676397",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "245b5b63-c6b6-4212-8578-ad6b0f962641",
                            Email = "basic@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 4,
                            NormalizedEmail = "BASIC@GMAIL.COM",
                            NormalizedUserName = "BASIC",
                            PasswordHash = "AQAAAAEAACcQAAAAECkpmgPfszc9WZjjEcp13SmDJLJa2VR3yNP74J0/GnhIpJW+CEFBMJ75I4Xydv0x1g==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 4,
                            SecurityStamp = "2cef32a7-66dd-4d53-8cca-ad91d1ad9845",
                            TwoFactorEnabled = false,
                            UserName = "Basic"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PROG3050.Models.EventUser", b =>
                {
                    b.HasOne("PROG3050.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050.Models.Game", b =>
                {
                    b.HasOne("PROG3050.Models.GameCategory", "GameCategory")
                        .WithMany()
                        .HasForeignKey("GameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCategory");
                });

            modelBuilder.Entity("PROG3050.Models.MailingAddress", b =>
                {
                    b.HasOne("PROG3050.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("PROG3050.Models.Order", b =>
                {
                    b.HasOne("PROG3050.Models.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050.Models.OrderGame", b =>
                {
                    b.HasOne("PROG3050.Models.Game", "Game")
                        .WithMany("OrderGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.HasOne("PROG3050.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceFavouritePlatform", b =>
                {
                    b.HasOne("PROG3050.Models.FavouritePlatform", "FavouritePlatform")
                        .WithMany("PreferenceFavouritePlatforms")
                        .HasForeignKey("FavouritePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany("PreferenceFavouritePlatforms")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouritePlatform");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceGameCategory", b =>
                {
                    b.HasOne("PROG3050.Models.GameCategory", "GameCategory")
                        .WithMany("PreferenceGameCategories")
                        .HasForeignKey("GameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany("PreferenceGameCategories")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCategory");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.Province", b =>
                {
                    b.HasOne("PROG3050.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PROG3050.Models.Review", b =>
                {
                    b.HasOne("PROG3050.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PROG3050.Models.User", b =>
                {
                    b.HasOne("PROG3050.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.MailingAddress", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("MailingAddress");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.Event", b =>
                {
                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("PROG3050.Models.FavouritePlatform", b =>
                {
                    b.Navigation("PreferenceFavouritePlatforms");
                });

            modelBuilder.Entity("PROG3050.Models.Game", b =>
                {
                    b.Navigation("OrderGames");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PROG3050.Models.GameCategory", b =>
                {
                    b.Navigation("PreferenceGameCategories");
                });

            modelBuilder.Entity("PROG3050.Models.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.Navigation("PreferenceFavouritePlatforms");

                    b.Navigation("PreferenceGameCategories");
                });

            modelBuilder.Entity("PROG3050.Models.User", b =>
                {
                    b.Navigation("EventUsers");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
