// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PROG3050.Data;

#nullable disable

namespace PROG3050.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231012165516_CreatePreferenceFavouritePlatformSchema")]
    partial class CreatePreferenceFavouritePlatformSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f806b3a2-933b-43e5-87f7-f015988dbebe",
                            ConcurrencyStamp = "b4d1cc66-e23e-46ba-8a8a-de4eb367a760",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "4e73d15d-a0a7-4a42-a974-0f3202a92e0f",
                            ConcurrencyStamp = "9ebbaad3-32ca-4b27-a15d-fa7a236a0881",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7845e505-01a7-4a1d-bf3a-0d4ce9017c4b",
                            ConcurrencyStamp = "dd5cb95a-d289-4fd3-87e5-c28a2d89baa9",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "1bb281d5-9ce0-4e67-bd4e-967e44c8c068",
                            ConcurrencyStamp = "19f3e159-15ac-4272-8251-6e07a63c3d27",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "272d49b0-3428-431c-995d-41da8d49063c",
                            RoleId = "f806b3a2-933b-43e5-87f7-f015988dbebe"
                        },
                        new
                        {
                            UserId = "57e65a64-91b9-4812-a8c6-23db3911deaa",
                            RoleId = "4e73d15d-a0a7-4a42-a974-0f3202a92e0f"
                        },
                        new
                        {
                            UserId = "ce5a4d1f-9173-4158-8210-22f2f6be9c56",
                            RoleId = "7845e505-01a7-4a1d-bf3a-0d4ce9017c4b"
                        },
                        new
                        {
                            UserId = "ae83a109-b456-4545-ab4e-fd1fbb53828c",
                            RoleId = "1bb281d5-9ce0-4e67-bd4e-967e44c8c068"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PROG3050.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Canada"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.FavouritePlatform", b =>
                {
                    b.Property<int>("FavouritePlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouritePlatformId"), 1L, 1);

                    b.Property<string>("FavouritePlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouritePlatformId");

                    b.ToTable("FavouritePlatform");

                    b.HasData(
                        new
                        {
                            FavouritePlatformId = 1,
                            FavouritePlatformName = "PC"
                        },
                        new
                        {
                            FavouritePlatformId = 2,
                            FavouritePlatformName = "Mobile"
                        },
                        new
                        {
                            FavouritePlatformId = 3,
                            FavouritePlatformName = "Console"
                        },
                        new
                        {
                            FavouritePlatformId = 4,
                            FavouritePlatformName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.GameCategory", b =>
                {
                    b.Property<int>("GameCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameCategoryId"), 1L, 1);

                    b.Property<string>("GameCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameCategoryId");

                    b.ToTable("GameCategory");

                    b.HasData(
                        new
                        {
                            GameCategoryId = 1,
                            GameCategoryName = "Action"
                        },
                        new
                        {
                            GameCategoryId = 2,
                            GameCategoryName = "Adventure"
                        },
                        new
                        {
                            GameCategoryId = 3,
                            GameCategoryName = "FPS"
                        },
                        new
                        {
                            GameCategoryId = 4,
                            GameCategoryName = "Shooter"
                        },
                        new
                        {
                            GameCategoryId = 5,
                            GameCategoryName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Others"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            LanguageName = "English"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.MailingAddress", b =>
                {
                    b.Property<int>("MailingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailingAddressId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailingAddressId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("MailingAddress");

                    b.HasData(
                        new
                        {
                            MailingAddressId = 1,
                            City = "HALIFAX",
                            DeliveryInstruction = "At the door",
                            PostalCode = "B3J 2B3",
                            ProvinceId = 7,
                            Street = "978 ARGYLE ST N"
                        },
                        new
                        {
                            MailingAddressId = 2,
                            City = "TORONTO",
                            DeliveryInstruction = "At the Post Box",
                            PostalCode = "M4K 1M8",
                            ProvinceId = 9,
                            Street = "87 DANFORTH AVE",
                            Unit = "501"
                        },
                        new
                        {
                            MailingAddressId = 3,
                            City = "BIG VALLEY",
                            PostalCode = "T0L 1K0",
                            ProvinceId = 1,
                            Street = "4 FIRST AVE S"
                        },
                        new
                        {
                            MailingAddressId = 4,
                            City = "COURTENAY",
                            DeliveryInstruction = "Ask the security Guard to get in.",
                            PostalCode = "V9N 0A7",
                            ProvinceId = 2,
                            Street = "PO BOX 4600 STN B"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"), 1L, 1);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Preference");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 3,
                            LanguageId = 1
                        },
                        new
                        {
                            PreferenceId = 4,
                            LanguageId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceFavouritePlatform", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("FavouritePlatformId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "FavouritePlatformId");

                    b.HasIndex("FavouritePlatformId");

                    b.ToTable("PreferenceFavouritePlatform");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            FavouritePlatformId = 1
                        },
                        new
                        {
                            PreferenceId = 1,
                            FavouritePlatformId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            FavouritePlatformId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            FavouritePlatformId = 3
                        },
                        new
                        {
                            PreferenceId = 3,
                            FavouritePlatformId = 1
                        },
                        new
                        {
                            PreferenceId = 4,
                            FavouritePlatformId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceGameCategory", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "GameCategoryId");

                    b.HasIndex("GameCategoryId");

                    b.ToTable("PreferenceGameCategory");

                    b.HasData(
                        new
                        {
                            PreferenceId = 1,
                            GameCategoryId = 1
                        },
                        new
                        {
                            PreferenceId = 1,
                            GameCategoryId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            GameCategoryId = 2
                        },
                        new
                        {
                            PreferenceId = 2,
                            GameCategoryId = 3
                        },
                        new
                        {
                            PreferenceId = 3,
                            GameCategoryId = 1
                        });
                });

            modelBuilder.Entity("PROG3050.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CountryId = 1,
                            ProvinceName = "AB"
                        },
                        new
                        {
                            ProvinceId = 2,
                            CountryId = 1,
                            ProvinceName = "BC"
                        },
                        new
                        {
                            ProvinceId = 3,
                            CountryId = 1,
                            ProvinceName = "MB"
                        },
                        new
                        {
                            ProvinceId = 4,
                            CountryId = 1,
                            ProvinceName = "NB"
                        },
                        new
                        {
                            ProvinceId = 5,
                            CountryId = 1,
                            ProvinceName = "NL"
                        },
                        new
                        {
                            ProvinceId = 6,
                            CountryId = 1,
                            ProvinceName = "NT"
                        },
                        new
                        {
                            ProvinceId = 7,
                            CountryId = 1,
                            ProvinceName = "NS"
                        },
                        new
                        {
                            ProvinceId = 8,
                            CountryId = 1,
                            ProvinceName = "NU"
                        },
                        new
                        {
                            ProvinceId = 9,
                            CountryId = 1,
                            ProvinceName = "ON"
                        },
                        new
                        {
                            ProvinceId = 10,
                            CountryId = 1,
                            ProvinceName = "PE"
                        },
                        new
                        {
                            ProvinceId = 11,
                            CountryId = 1,
                            ProvinceName = "QC"
                        },
                        new
                        {
                            ProvinceId = 12,
                            CountryId = 1,
                            ProvinceName = "SK"
                        },
                        new
                        {
                            ProvinceId = 13,
                            CountryId = 1,
                            ProvinceName = "YT"
                        });
                });

            modelBuilder.Entity("PROG3050.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAddressSame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromotionalEmail")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MailingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MailingAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PreferenceId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "272d49b0-3428-431c-995d-41da8d49063c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01b9180f-8ea2-4118-b10a-8a1a01ef9f52",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 1,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLnU73KaWL6Z75awgTg3wFiTt77B0zVZW0Z8VO/UL3Nxvhipa1XqAZpsbZ99WPA0Q==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 1,
                            SecurityStamp = "14d1a896-a534-4cff-8fb7-b406c18ba953",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "57e65a64-91b9-4812-a8c6-23db3911deaa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c091bd73-6660-4f9f-a45b-bcdba4bd19f1",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 2,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOKtlr13LFpRADBwcXcTqPpVjgwJjeKPLYviOEEncMv+FNVVjv/D51e4q9WbiUdcTA==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 2,
                            SecurityStamp = "1afd7aac-3093-4470-ad2b-e6132b499ae3",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "ce5a4d1f-9173-4158-8210-22f2f6be9c56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6644f646-7b45-4bdb-87ce-a2712d2dbd99",
                            Email = "moderator@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 3,
                            NormalizedEmail = "MODERATOR",
                            NormalizedUserName = "MODERATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENpusdG/EMC2Dl0bmmZ2BgOpP0uZFC4dlPl5qUUwiPk1Fu05MlCAihASwikqJgie6A==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 3,
                            SecurityStamp = "22945467-baba-49f7-a7f3-5fef885c091d",
                            TwoFactorEnabled = false,
                            UserName = "Moderator"
                        },
                        new
                        {
                            Id = "ae83a109-b456-4545-ab4e-fd1fbb53828c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "553fd713-4675-438e-bab3-8ca92645b2a6",
                            Email = "basic@gmail.com",
                            EmailConfirmed = true,
                            GenderId = 3,
                            IsAddressSame = false,
                            IsPromotionalEmail = false,
                            LockoutEnabled = false,
                            MailingAddressId = 4,
                            NormalizedEmail = "BASIC@GMAIL.COM",
                            NormalizedUserName = "BASIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEB19LOhSRbzJ8QdnTAbMrMp49y/PtI8lMxlMf49DqYeeuFVuJcQ0p2FPBlUYjJp6dA==",
                            PhoneNumberConfirmed = true,
                            PreferenceId = 4,
                            SecurityStamp = "310d916e-ce6a-40fd-8f4e-106d75685dde",
                            TwoFactorEnabled = false,
                            UserName = "Basic"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PROG3050.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PROG3050.Models.MailingAddress", b =>
                {
                    b.HasOne("PROG3050.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.HasOne("PROG3050.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceFavouritePlatform", b =>
                {
                    b.HasOne("PROG3050.Models.FavouritePlatform", "FavouritePlatform")
                        .WithMany("PreferenceFavouritePlatforms")
                        .HasForeignKey("FavouritePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany("PreferenceFavouritePlatforms")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouritePlatform");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.PreferenceGameCategory", b =>
                {
                    b.HasOne("PROG3050.Models.GameCategory", "GameCategory")
                        .WithMany("PreferenceGameCategories")
                        .HasForeignKey("GameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany("PreferenceGameCategories")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCategory");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.Province", b =>
                {
                    b.HasOne("PROG3050.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PROG3050.Models.User", b =>
                {
                    b.HasOne("PROG3050.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.MailingAddress", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PROG3050.Models.Preference", "Preference")
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("MailingAddress");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("PROG3050.Models.FavouritePlatform", b =>
                {
                    b.Navigation("PreferenceFavouritePlatforms");
                });

            modelBuilder.Entity("PROG3050.Models.GameCategory", b =>
                {
                    b.Navigation("PreferenceGameCategories");
                });

            modelBuilder.Entity("PROG3050.Models.Preference", b =>
                {
                    b.Navigation("PreferenceFavouritePlatforms");

                    b.Navigation("PreferenceGameCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
